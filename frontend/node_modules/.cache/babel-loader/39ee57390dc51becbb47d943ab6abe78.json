{"ast":null,"code":"import invariant from 'invariant';\nimport isFunction from './utils/isFunction';\nimport isSymbol from './utils/isSymbol';\nimport isEmpty from './utils/isEmpty';\nimport toString from './utils/toString';\nimport isString from './utils/isString';\nimport { ACTION_TYPE_DELIMITER } from './constants';\nfunction isValidActionType(type) {\n  return isString(type) || isFunction(type) || isSymbol(type);\n}\nfunction isValidActionTypes(types) {\n  if (isEmpty(types)) {\n    return false;\n  }\n  return types.every(isValidActionType);\n}\nexport default function combineActions() {\n  for (var _len = arguments.length, actionsTypes = new Array(_len), _key = 0; _key < _len; _key++) {\n    actionsTypes[_key] = arguments[_key];\n  }\n  invariant(isValidActionTypes(actionsTypes), 'Expected action types to be strings, symbols, or action creators');\n  var combinedActionType = actionsTypes.map(toString).join(ACTION_TYPE_DELIMITER);\n  return {\n    toString: function toString() {\n      return combinedActionType;\n    }\n  };\n}","map":{"version":3,"names":["invariant","isFunction","isSymbol","isEmpty","toString","isString","ACTION_TYPE_DELIMITER","isValidActionType","type","isValidActionTypes","types","every","combineActions","_len","arguments","length","actionsTypes","Array","_key","combinedActionType","map","join"],"sources":["/app/node_modules/redux-actions/es/combineActions.js"],"sourcesContent":["import invariant from 'invariant';\nimport isFunction from './utils/isFunction';\nimport isSymbol from './utils/isSymbol';\nimport isEmpty from './utils/isEmpty';\nimport toString from './utils/toString';\nimport isString from './utils/isString';\nimport { ACTION_TYPE_DELIMITER } from './constants';\n\nfunction isValidActionType(type) {\n  return isString(type) || isFunction(type) || isSymbol(type);\n}\n\nfunction isValidActionTypes(types) {\n  if (isEmpty(types)) {\n    return false;\n  }\n\n  return types.every(isValidActionType);\n}\n\nexport default function combineActions() {\n  for (var _len = arguments.length, actionsTypes = new Array(_len), _key = 0; _key < _len; _key++) {\n    actionsTypes[_key] = arguments[_key];\n  }\n\n  invariant(isValidActionTypes(actionsTypes), 'Expected action types to be strings, symbols, or action creators');\n  var combinedActionType = actionsTypes.map(toString).join(ACTION_TYPE_DELIMITER);\n  return {\n    toString: function toString() {\n      return combinedActionType;\n    }\n  };\n}"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,OAAO,MAAM,iBAAiB;AACrC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,SAASC,qBAAqB,QAAQ,aAAa;AAEnD,SAASC,iBAAiBA,CAACC,IAAI,EAAE;EAC/B,OAAOH,QAAQ,CAACG,IAAI,CAAC,IAAIP,UAAU,CAACO,IAAI,CAAC,IAAIN,QAAQ,CAACM,IAAI,CAAC;AAC7D;AAEA,SAASC,kBAAkBA,CAACC,KAAK,EAAE;EACjC,IAAIP,OAAO,CAACO,KAAK,CAAC,EAAE;IAClB,OAAO,KAAK;EACd;EAEA,OAAOA,KAAK,CAACC,KAAK,CAACJ,iBAAiB,CAAC;AACvC;AAEA,eAAe,SAASK,cAAcA,CAAA,EAAG;EACvC,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,YAAY,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;IAC/FF,YAAY,CAACE,IAAI,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;EACtC;EAEAlB,SAAS,CAACS,kBAAkB,CAACO,YAAY,CAAC,EAAE,kEAAkE,CAAC;EAC/G,IAAIG,kBAAkB,GAAGH,YAAY,CAACI,GAAG,CAAChB,QAAQ,CAAC,CAACiB,IAAI,CAACf,qBAAqB,CAAC;EAC/E,OAAO;IACLF,QAAQ,EAAE,SAASA,QAAQA,CAAA,EAAG;MAC5B,OAAOe,kBAAkB;IAC3B;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module"}