{"ast":null,"code":"'use strict';\n\n// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar Buffer = require('safe-buffer').Buffer;\nvar BN = require('bn.js');\nvar EC = require('elliptic').ec;\nvar parseKeys = require('parse-asn1');\nvar curves = require('./curves.json');\nfunction verify(sig, hash, key, signType, tag) {\n  var pub = parseKeys(key);\n  if (pub.type === 'ec') {\n    // rsa keys can be interpreted as ecdsa ones in openssl\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') {\n      throw new Error('wrong public key type');\n    }\n    return ecVerify(sig, hash, pub);\n  } else if (pub.type === 'dsa') {\n    if (signType !== 'dsa') {\n      throw new Error('wrong public key type');\n    }\n    return dsaVerify(sig, hash, pub);\n  }\n  if (signType !== 'rsa' && signType !== 'ecdsa/rsa') {\n    throw new Error('wrong public key type');\n  }\n  hash = Buffer.concat([tag, hash]);\n  var len = pub.modulus.byteLength();\n  var pad = [1];\n  var padNum = 0;\n  while (hash.length + pad.length + 2 < len) {\n    pad.push(0xff);\n    padNum += 1;\n  }\n  pad.push(0x00);\n  var i = -1;\n  while (++i < hash.length) {\n    pad.push(hash[i]);\n  }\n  pad = Buffer.from(pad);\n  var red = BN.mont(pub.modulus);\n  sig = new BN(sig).toRed(red);\n  sig = sig.redPow(new BN(pub.publicExponent));\n  sig = Buffer.from(sig.fromRed().toArray());\n  var out = padNum < 8 ? 1 : 0;\n  len = Math.min(sig.length, pad.length);\n  if (sig.length !== pad.length) {\n    out = 1;\n  }\n  i = -1;\n  while (++i < len) {\n    out |= sig[i] ^ pad[i];\n  }\n  return out === 0;\n}\nfunction ecVerify(sig, hash, pub) {\n  var curveId = curves[pub.data.algorithm.curve.join('.')];\n  if (!curveId) {\n    throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));\n  }\n  var curve = new EC(curveId);\n  var pubkey = pub.data.subjectPrivateKey.data;\n  return curve.verify(hash, sig, pubkey);\n}\nfunction dsaVerify(sig, hash, pub) {\n  var p = pub.data.p;\n  var q = pub.data.q;\n  var g = pub.data.g;\n  var y = pub.data.pub_key;\n  var unpacked = parseKeys.signature.decode(sig, 'der');\n  var s = unpacked.s;\n  var r = unpacked.r;\n  checkValue(s, q);\n  checkValue(r, q);\n  var montp = BN.mont(p);\n  var w = s.invm(q);\n  var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);\n  return v.cmp(r) === 0;\n}\nfunction checkValue(b, q) {\n  if (b.cmpn(0) <= 0) {\n    throw new Error('invalid sig');\n  }\n  if (b.cmp(q) >= 0) {\n    throw new Error('invalid sig');\n  }\n}\nmodule.exports = verify;","map":{"version":3,"names":["Buffer","require","BN","EC","ec","parseKeys","curves","verify","sig","hash","key","signType","tag","pub","type","Error","ecVerify","dsaVerify","concat","len","modulus","byteLength","pad","padNum","length","push","i","from","red","mont","toRed","redPow","publicExponent","fromRed","toArray","out","Math","min","curveId","data","algorithm","curve","join","pubkey","subjectPrivateKey","p","q","g","y","pub_key","unpacked","signature","decode","s","r","checkValue","montp","w","invm","v","mul","mod","cmp","b","cmpn","module","exports"],"sources":["/app/node_modules/browserify-sign/browser/verify.js"],"sourcesContent":["'use strict';\n\n// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar Buffer = require('safe-buffer').Buffer;\nvar BN = require('bn.js');\nvar EC = require('elliptic').ec;\nvar parseKeys = require('parse-asn1');\nvar curves = require('./curves.json');\n\nfunction verify(sig, hash, key, signType, tag) {\n  var pub = parseKeys(key);\n  if (pub.type === 'ec') {\n    // rsa keys can be interpreted as ecdsa ones in openssl\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong public key type'); }\n    return ecVerify(sig, hash, pub);\n  } else if (pub.type === 'dsa') {\n    if (signType !== 'dsa') { throw new Error('wrong public key type'); }\n    return dsaVerify(sig, hash, pub);\n  }\n  if (signType !== 'rsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong public key type'); }\n\n  hash = Buffer.concat([tag, hash]);\n  var len = pub.modulus.byteLength();\n  var pad = [1];\n  var padNum = 0;\n  while (hash.length + pad.length + 2 < len) {\n    pad.push(0xff);\n    padNum += 1;\n  }\n  pad.push(0x00);\n  var i = -1;\n  while (++i < hash.length) {\n    pad.push(hash[i]);\n  }\n  pad = Buffer.from(pad);\n  var red = BN.mont(pub.modulus);\n  sig = new BN(sig).toRed(red);\n\n  sig = sig.redPow(new BN(pub.publicExponent));\n  sig = Buffer.from(sig.fromRed().toArray());\n  var out = padNum < 8 ? 1 : 0;\n  len = Math.min(sig.length, pad.length);\n  if (sig.length !== pad.length) { out = 1; }\n\n  i = -1;\n  while (++i < len) { out |= sig[i] ^ pad[i]; }\n  return out === 0;\n}\n\nfunction ecVerify(sig, hash, pub) {\n  var curveId = curves[pub.data.algorithm.curve.join('.')];\n  if (!curveId) { throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.')); }\n\n  var curve = new EC(curveId);\n  var pubkey = pub.data.subjectPrivateKey.data;\n\n  return curve.verify(hash, sig, pubkey);\n}\n\nfunction dsaVerify(sig, hash, pub) {\n  var p = pub.data.p;\n  var q = pub.data.q;\n  var g = pub.data.g;\n  var y = pub.data.pub_key;\n  var unpacked = parseKeys.signature.decode(sig, 'der');\n  var s = unpacked.s;\n  var r = unpacked.r;\n  checkValue(s, q);\n  checkValue(r, q);\n  var montp = BN.mont(p);\n  var w = s.invm(q);\n  var v = g.toRed(montp)\n    .redPow(new BN(hash).mul(w).mod(q))\n    .fromRed()\n    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())\n    .mod(p)\n    .mod(q);\n  return v.cmp(r) === 0;\n}\n\nfunction checkValue(b, q) {\n  if (b.cmpn(0) <= 0) { throw new Error('invalid sig'); }\n  if (b.cmp(q) >= 0) { throw new Error('invalid sig'); }\n}\n\nmodule.exports = verify;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}