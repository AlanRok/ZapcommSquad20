{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import {\n//     Chart as ChartJS,\n//     CategoryScale,\n//     LinearScale,\n//     BarElement,\n//     Title,\n//     Tooltip,\n//     Legend,\n// } from 'chart.js';\n// import { Bar } from 'react-chartjs-2';\n// import ChartDataLabels from 'chartjs-plugin-datalabels';\n// import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n// import brLocale from 'date-fns/locale/pt-BR';\n// import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';\n// import { Button, Stack, TextField } from '@mui/material';\n// import Typography from \"@material-ui/core/Typography\";\n// import api from '../../services/api';\n// import { format } from 'date-fns';\n// import { toast } from 'react-toastify';\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import './button.css';\n\n// const useStyles = makeStyles((theme) => ({\n//     container: {\n//         paddingTop: theme.spacing(1),\n//         paddingBottom: theme.padding,\n//         paddingLeft: theme.spacing(1),\n//         paddingRight: theme.spacing(2),\n//     }\n// }));\n\n// ChartJS.register(\n//     CategoryScale,\n//     LinearScale,\n//     BarElement,\n//     Title,\n//     Tooltip,\n//     Legend,\n//     ChartDataLabels\n// );\n\n// export const options = {\n//     responsive: true,\n//     plugins: {\n//         legend: {\n//             position: 'top',\n//             display: false,\n//         },\n//         title: {\n//             display: true,\n//             position: 'left',\n//         },\n//         datalabels: {\n//             display: true,\n//             anchor: 'start',\n//             offset: -30,\n//             align: \"start\",\n//             color: \"#fff\",\n//             textStrokeColor: \"#000\",\n//             textStrokeWidth: 2,\n//             font: {\n//                 size: 20,\n//                 weight: \"bold\"\n\n//             },\n//         }\n//     },\n// };\n\n// export const ChatsUser = () => {\n//     // const classes = useStyles();\n//     const [initialDate, setInitialDate] = useState(new Date());\n//     const [finalDate, setFinalDate] = useState(new Date());\n//     const [ticketsData, setTicketsData] = useState({ data: [] });\n\n//     const companyId = localStorage.getItem(\"companyId\");\n\n//     useEffect(() => {\n//         handleGetTicketsInformation();\n//     }, []);\n\n//     const dataCharts = {\n\n//         labels: ticketsData && ticketsData?.data.length > 0 && ticketsData?.data.map((item) => item.nome),\n//         datasets: [\n//             {\n//                 data: ticketsData?.data.length > 0 && ticketsData?.data.map((item, index) => {\n//                     return item.quantidade\n//                 }),\n//                 backgroundColor: '#2DDD7F',\n//             },\n\n//         ],\n//     };\n\n//     const handleGetTicketsInformation = async () => {\n//         try {\n\n//             const { data } = await api.get(`/dashboard/ticketsUsers?initialDate=${format(initialDate, 'yyyy-MM-dd')}&finalDate=${format(finalDate, 'yyyy-MM-dd')}&companyId=${companyId}`);\n//             setTicketsData(data);\n//         } catch (error) {\n//             toast.error('Erro ao obter informações da conversa');\n//         }\n//     }\n\n//     return (\n//         <>\n//             <Typography component=\"h2\" variant=\"h6\" color=\"#000000\" gutterBottom>\n//                 Quantidade de Chamados por Usuário\n//             </Typography>\n\n//             <Stack direction={'row'} spacing={2} alignItems={'center'} sx={{ my: 2, }} >\n\n//                 <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={brLocale}>\n//                     <DatePicker\n//                         value={initialDate}\n//                         onChange={(newValue) => { setInitialDate(newValue) }}\n//                         label=\"Inicio\"\n//                         renderInput={(params) => <TextField fullWidth {...params} sx={{ width: '20ch' }} />}\n\n//                     />\n//                 </LocalizationProvider>\n\n//                 <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={brLocale}>\n//                     <DatePicker\n//                         value={finalDate}\n//                         onChange={(newValue) => { setFinalDate(newValue) }}\n//                         label=\"Fim\"\n//                         renderInput={(params) => <TextField fullWidth {...params} sx={{ width: '20ch' }} />}\n//                     />\n//                 </LocalizationProvider>\n\n//                 <Button className=\"buttonHover\" onClick={handleGetTicketsInformation} variant='contained'>Filtrar</Button>\n\n//             </Stack>\n//             <Bar options={options} data={dataCharts} style={{ maxWidth: '100%', maxHeight: '280px', }} />\n//         </>\n//     );\n// }","map":{"version":3,"names":[],"sources":["/app/src/pages/Dashboard/ChartsUser.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import {\n//     Chart as ChartJS,\n//     CategoryScale,\n//     LinearScale,\n//     BarElement,\n//     Title,\n//     Tooltip,\n//     Legend,\n// } from 'chart.js';\n// import { Bar } from 'react-chartjs-2';\n// import ChartDataLabels from 'chartjs-plugin-datalabels';\n// import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n// import brLocale from 'date-fns/locale/pt-BR';\n// import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';\n// import { Button, Stack, TextField } from '@mui/material';\n// import Typography from \"@material-ui/core/Typography\";\n// import api from '../../services/api';\n// import { format } from 'date-fns';\n// import { toast } from 'react-toastify';\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import './button.css';\n\n// const useStyles = makeStyles((theme) => ({\n//     container: {\n//         paddingTop: theme.spacing(1),\n//         paddingBottom: theme.padding,\n//         paddingLeft: theme.spacing(1),\n//         paddingRight: theme.spacing(2),\n//     }\n// }));\n\n// ChartJS.register(\n//     CategoryScale,\n//     LinearScale,\n//     BarElement,\n//     Title,\n//     Tooltip,\n//     Legend,\n//     ChartDataLabels\n// );\n\n// export const options = {\n//     responsive: true,\n//     plugins: {\n//         legend: {\n//             position: 'top',\n//             display: false,\n//         },\n//         title: {\n//             display: true,\n//             position: 'left',\n//         },\n//         datalabels: {\n//             display: true,\n//             anchor: 'start',\n//             offset: -30,\n//             align: \"start\",\n//             color: \"#fff\",\n//             textStrokeColor: \"#000\",\n//             textStrokeWidth: 2,\n//             font: {\n//                 size: 20,\n//                 weight: \"bold\"\n\n//             },\n//         }\n//     },\n// };\n\n// export const ChatsUser = () => {\n//     // const classes = useStyles();\n//     const [initialDate, setInitialDate] = useState(new Date());\n//     const [finalDate, setFinalDate] = useState(new Date());\n//     const [ticketsData, setTicketsData] = useState({ data: [] });\n\n//     const companyId = localStorage.getItem(\"companyId\");\n\n//     useEffect(() => {\n//         handleGetTicketsInformation();\n//     }, []);\n\n//     const dataCharts = {\n\n//         labels: ticketsData && ticketsData?.data.length > 0 && ticketsData?.data.map((item) => item.nome),\n//         datasets: [\n//             {\n//                 data: ticketsData?.data.length > 0 && ticketsData?.data.map((item, index) => {\n//                     return item.quantidade\n//                 }),\n//                 backgroundColor: '#2DDD7F',\n//             },\n\n//         ],\n//     };\n\n//     const handleGetTicketsInformation = async () => {\n//         try {\n\n//             const { data } = await api.get(`/dashboard/ticketsUsers?initialDate=${format(initialDate, 'yyyy-MM-dd')}&finalDate=${format(finalDate, 'yyyy-MM-dd')}&companyId=${companyId}`);\n//             setTicketsData(data);\n//         } catch (error) {\n//             toast.error('Erro ao obter informações da conversa');\n//         }\n//     }\n\n//     return (\n//         <>\n//             <Typography component=\"h2\" variant=\"h6\" color=\"#000000\" gutterBottom>\n//                 Quantidade de Chamados por Usuário\n//             </Typography>\n\n//             <Stack direction={'row'} spacing={2} alignItems={'center'} sx={{ my: 2, }} >\n\n//                 <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={brLocale}>\n//                     <DatePicker\n//                         value={initialDate}\n//                         onChange={(newValue) => { setInitialDate(newValue) }}\n//                         label=\"Inicio\"\n//                         renderInput={(params) => <TextField fullWidth {...params} sx={{ width: '20ch' }} />}\n\n//                     />\n//                 </LocalizationProvider>\n\n//                 <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={brLocale}>\n//                     <DatePicker\n//                         value={finalDate}\n//                         onChange={(newValue) => { setFinalDate(newValue) }}\n//                         label=\"Fim\"\n//                         renderInput={(params) => <TextField fullWidth {...params} sx={{ width: '20ch' }} />}\n//                     />\n//                 </LocalizationProvider>\n\n//                 <Button className=\"buttonHover\" onClick={handleGetTicketsInformation} variant='contained'>Filtrar</Button>\n\n//             </Stack>\n//             <Bar options={options} data={dataCharts} style={{ maxWidth: '100%', maxHeight: '280px', }} />\n//         </>\n//     );\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}