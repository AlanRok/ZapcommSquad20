{"ast":null,"code":"import isSchema from './util/isSchema';\nexport function create(builder) {\n  return new Lazy(builder);\n}\nclass Lazy {\n  constructor(builder) {\n    this.type = 'lazy';\n    this.__isYupSchema__ = true;\n    this.__inputType = void 0;\n    this.__outputType = void 0;\n    this._resolve = (value, options = {}) => {\n      let schema = this.builder(value, options);\n      if (!isSchema(schema)) throw new TypeError('lazy() functions must return a valid schema');\n      return schema.resolve(options);\n    };\n    this.builder = builder;\n  }\n  resolve(options) {\n    return this._resolve(options.value, options);\n  }\n  cast(value, options) {\n    return this._resolve(value, options).cast(value, options);\n  }\n  validate(value, options, maybeCb) {\n    // @ts-expect-error missing public callback on type\n    return this._resolve(value, options).validate(value, options, maybeCb);\n  }\n  validateSync(value, options) {\n    return this._resolve(value, options).validateSync(value, options);\n  }\n  validateAt(path, value, options) {\n    return this._resolve(value, options).validateAt(path, value, options);\n  }\n  validateSyncAt(path, value, options) {\n    return this._resolve(value, options).validateSyncAt(path, value, options);\n  }\n  describe() {\n    return null;\n  }\n  isValid(value, options) {\n    return this._resolve(value, options).isValid(value, options);\n  }\n  isValidSync(value, options) {\n    return this._resolve(value, options).isValidSync(value, options);\n  }\n}\nexport default Lazy;","map":{"version":3,"names":["isSchema","create","builder","Lazy","constructor","type","__isYupSchema__","__inputType","__outputType","_resolve","value","options","schema","TypeError","resolve","cast","validate","maybeCb","validateSync","validateAt","path","validateSyncAt","describe","isValid","isValidSync"],"sources":["/app/node_modules/yup/es/Lazy.js"],"sourcesContent":["import isSchema from './util/isSchema';\nexport function create(builder) {\n  return new Lazy(builder);\n}\n\nclass Lazy {\n  constructor(builder) {\n    this.type = 'lazy';\n    this.__isYupSchema__ = true;\n    this.__inputType = void 0;\n    this.__outputType = void 0;\n\n    this._resolve = (value, options = {}) => {\n      let schema = this.builder(value, options);\n      if (!isSchema(schema)) throw new TypeError('lazy() functions must return a valid schema');\n      return schema.resolve(options);\n    };\n\n    this.builder = builder;\n  }\n\n  resolve(options) {\n    return this._resolve(options.value, options);\n  }\n\n  cast(value, options) {\n    return this._resolve(value, options).cast(value, options);\n  }\n\n  validate(value, options, maybeCb) {\n    // @ts-expect-error missing public callback on type\n    return this._resolve(value, options).validate(value, options, maybeCb);\n  }\n\n  validateSync(value, options) {\n    return this._resolve(value, options).validateSync(value, options);\n  }\n\n  validateAt(path, value, options) {\n    return this._resolve(value, options).validateAt(path, value, options);\n  }\n\n  validateSyncAt(path, value, options) {\n    return this._resolve(value, options).validateSyncAt(path, value, options);\n  }\n\n  describe() {\n    return null;\n  }\n\n  isValid(value, options) {\n    return this._resolve(value, options).isValid(value, options);\n  }\n\n  isValidSync(value, options) {\n    return this._resolve(value, options).isValidSync(value, options);\n  }\n\n}\n\nexport default Lazy;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,iBAAiB;AACtC,OAAO,SAASC,MAAMA,CAACC,OAAO,EAAE;EAC9B,OAAO,IAAIC,IAAI,CAACD,OAAO,CAAC;AAC1B;AAEA,MAAMC,IAAI,CAAC;EACTC,WAAWA,CAACF,OAAO,EAAE;IACnB,IAAI,CAACG,IAAI,GAAG,MAAM;IAClB,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACC,WAAW,GAAG,KAAK,CAAC;IACzB,IAAI,CAACC,YAAY,GAAG,KAAK,CAAC;IAE1B,IAAI,CAACC,QAAQ,GAAG,CAACC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;MACvC,IAAIC,MAAM,GAAG,IAAI,CAACV,OAAO,CAACQ,KAAK,EAAEC,OAAO,CAAC;MACzC,IAAI,CAACX,QAAQ,CAACY,MAAM,CAAC,EAAE,MAAM,IAAIC,SAAS,CAAC,6CAA6C,CAAC;MACzF,OAAOD,MAAM,CAACE,OAAO,CAACH,OAAO,CAAC;IAChC,CAAC;IAED,IAAI,CAACT,OAAO,GAAGA,OAAO;EACxB;EAEAY,OAAOA,CAACH,OAAO,EAAE;IACf,OAAO,IAAI,CAACF,QAAQ,CAACE,OAAO,CAACD,KAAK,EAAEC,OAAO,CAAC;EAC9C;EAEAI,IAAIA,CAACL,KAAK,EAAEC,OAAO,EAAE;IACnB,OAAO,IAAI,CAACF,QAAQ,CAACC,KAAK,EAAEC,OAAO,CAAC,CAACI,IAAI,CAACL,KAAK,EAAEC,OAAO,CAAC;EAC3D;EAEAK,QAAQA,CAACN,KAAK,EAAEC,OAAO,EAAEM,OAAO,EAAE;IAChC;IACA,OAAO,IAAI,CAACR,QAAQ,CAACC,KAAK,EAAEC,OAAO,CAAC,CAACK,QAAQ,CAACN,KAAK,EAAEC,OAAO,EAAEM,OAAO,CAAC;EACxE;EAEAC,YAAYA,CAACR,KAAK,EAAEC,OAAO,EAAE;IAC3B,OAAO,IAAI,CAACF,QAAQ,CAACC,KAAK,EAAEC,OAAO,CAAC,CAACO,YAAY,CAACR,KAAK,EAAEC,OAAO,CAAC;EACnE;EAEAQ,UAAUA,CAACC,IAAI,EAAEV,KAAK,EAAEC,OAAO,EAAE;IAC/B,OAAO,IAAI,CAACF,QAAQ,CAACC,KAAK,EAAEC,OAAO,CAAC,CAACQ,UAAU,CAACC,IAAI,EAAEV,KAAK,EAAEC,OAAO,CAAC;EACvE;EAEAU,cAAcA,CAACD,IAAI,EAAEV,KAAK,EAAEC,OAAO,EAAE;IACnC,OAAO,IAAI,CAACF,QAAQ,CAACC,KAAK,EAAEC,OAAO,CAAC,CAACU,cAAc,CAACD,IAAI,EAAEV,KAAK,EAAEC,OAAO,CAAC;EAC3E;EAEAW,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI;EACb;EAEAC,OAAOA,CAACb,KAAK,EAAEC,OAAO,EAAE;IACtB,OAAO,IAAI,CAACF,QAAQ,CAACC,KAAK,EAAEC,OAAO,CAAC,CAACY,OAAO,CAACb,KAAK,EAAEC,OAAO,CAAC;EAC9D;EAEAa,WAAWA,CAACd,KAAK,EAAEC,OAAO,EAAE;IAC1B,OAAO,IAAI,CAACF,QAAQ,CAACC,KAAK,EAAEC,OAAO,CAAC,CAACa,WAAW,CAACd,KAAK,EAAEC,OAAO,CAAC;EAClE;AAEF;AAEA,eAAeR,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module"}