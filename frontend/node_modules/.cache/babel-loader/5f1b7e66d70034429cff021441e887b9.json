{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _exponent = _interopRequireDefault(require(\"./exponent.js\"));\nvar _formatGroup = _interopRequireDefault(require(\"./formatGroup.js\"));\nvar _formatNumerals = _interopRequireDefault(require(\"./formatNumerals.js\"));\nvar _formatSpecifier = _interopRequireDefault(require(\"./formatSpecifier.js\"));\nvar _formatTrim = _interopRequireDefault(require(\"./formatTrim.js\"));\nvar _formatTypes = _interopRequireDefault(require(\"./formatTypes.js\"));\nvar _formatPrefixAuto = require(\"./formatPrefixAuto.js\");\nvar _identity = _interopRequireDefault(require(\"./identity.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar map = Array.prototype.map,\n  prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\nfunction _default(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + \"\"),\n    currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n    currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n    decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n    numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),\n    percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n    minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n    nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n  function newFormat(specifier) {\n    specifier = (0, _formatSpecifier.default)(specifier);\n    var fill = specifier.fill,\n      align = specifier.align,\n      sign = specifier.sign,\n      symbol = specifier.symbol,\n      zero = specifier.zero,\n      width = specifier.width,\n      comma = specifier.comma,\n      precision = specifier.precision,\n      trim = specifier.trim,\n      type = specifier.type; // The \"n\" type is an alias for \",g\".\n\n    if (type === \"n\") comma = true, type = \"g\"; // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = \"g\"; // If zero fill is specified, padding goes after sign and before digits.\n\n    if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\"; // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n      suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\"; // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n\n    var formatType = _formatTypes.default[type],\n      maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n\n    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n    function format(value) {\n      var valuePrefix = prefix,\n        valueSuffix = suffix,\n        i,\n        n,\n        c;\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n\n        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.\n\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.\n\n        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false; // Compute the prefix and suffix.\n\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : minus : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\"); // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      } // If the fill character is not \"0\", grouping is applied before padding.\n\n      if (comma && !zero) value = group(value, Infinity); // Compute the padding.\n\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n        padding = length < width ? new Array(width - length + 1).join(fill) : \"\"; // If the fill character is \"0\", grouping is applied after padding.\n\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\"; // Reconstruct the final output based on the desired alignment.\n\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n      return numerals(value);\n    }\n    format.toString = function () {\n      return specifier + \"\";\n    };\n    return format;\n  }\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = \"f\", specifier)),\n      e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,\n      k = Math.pow(10, -e),\n      prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_default","_exponent","_interopRequireDefault","require","_formatGroup","_formatNumerals","_formatSpecifier","_formatTrim","_formatTypes","_formatPrefixAuto","_identity","obj","__esModule","map","Array","prototype","prefixes","locale","group","grouping","undefined","thousands","call","Number","currencyPrefix","currency","currencySuffix","decimal","numerals","String","percent","minus","nan","newFormat","specifier","fill","align","sign","symbol","zero","width","comma","precision","trim","type","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","Math","max","min","format","valuePrefix","valueSuffix","i","n","c","valueNegative","isNaN","abs","prefixExponent","length","charCodeAt","slice","Infinity","padding","join","toString","formatPrefix","f","e","floor","k","pow"],"sources":["/app/node_modules/victory-vendor/lib-vendor/d3-format/src/locale.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _exponent = _interopRequireDefault(require(\"./exponent.js\"));\n\nvar _formatGroup = _interopRequireDefault(require(\"./formatGroup.js\"));\n\nvar _formatNumerals = _interopRequireDefault(require(\"./formatNumerals.js\"));\n\nvar _formatSpecifier = _interopRequireDefault(require(\"./formatSpecifier.js\"));\n\nvar _formatTrim = _interopRequireDefault(require(\"./formatTrim.js\"));\n\nvar _formatTypes = _interopRequireDefault(require(\"./formatTypes.js\"));\n\nvar _formatPrefixAuto = require(\"./formatPrefixAuto.js\");\n\nvar _identity = _interopRequireDefault(require(\"./identity.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n\nfunction _default(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = (0, _formatSpecifier.default)(specifier);\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type; // The \"n\" type is an alias for \",g\".\n\n    if (type === \"n\") comma = true, type = \"g\"; // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = \"g\"; // If zero fill is specified, padding goes after sign and before digits.\n\n    if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\"; // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\"; // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n\n    var formatType = _formatTypes.default[type],\n        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n\n    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i,\n          n,\n          c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n\n        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.\n\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.\n\n        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false; // Compute the prefix and suffix.\n\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : minus : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\"); // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      } // If the fill character is not \"0\", grouping is applied before padding.\n\n\n      if (comma && !zero) value = group(value, Infinity); // Compute the padding.\n\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\"; // If the fill character is \"0\", grouping is applied after padding.\n\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\"; // Reconstruct the final output based on the desired alignment.\n\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function () {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}