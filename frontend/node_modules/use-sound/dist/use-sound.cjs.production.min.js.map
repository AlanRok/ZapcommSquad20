{"version":3,"file":"use-sound.cjs.production.min.js","sources":["../src/index.ts","../src/use-on-mount.ts"],"sourcesContent":["import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        const sound = new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n\n        setSound(sound);\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n\n      if (isMounted.current) {\n        sound.once('end', () => {\n          // If sound is not looping\n          if (!sound.playing()) {\n            setIsPlaying(false);\n          }\n        });\n      }\n\n      if (isMounted.current) {\n        setIsPlaying(true);\n      }\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      isPlaying,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n","import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n"],"names":["useSound","src","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","React","useRef","isMounted","useState","isPlaying","setIsPlaying","duration","setDuration","sound","setSound","handleLoad","call","this","current","then","mod","Howl","Array","isArray","rate","useEffect","JSON","stringify","play","useCallback","options","forceSoundEnabled","stop","id","once","playing","pause"],"mappings":"4WAMwBA,EACtBC,oBAQoB,YANlBC,OAAAA,aAAS,QACTC,aAAAA,aAAe,QACfC,aAAAA,oBACAC,UAAAA,gBACAC,IAAAA,OACGC,sMAGCC,EAAkBC,EAAMC,OAA0B,MAClDC,EAAYF,EAAMC,QAAO,KAEGD,EAAMG,UAAS,GAA1CC,OAAWC,SACcL,EAAMG,SAAwB,MAAvDG,OAAUC,SAESP,EAAMG,SAAsB,MAA/CK,OAAOC,OAERC,EAAa,WACK,mBAAXb,GAETA,EAAOc,KAAKC,MAGVV,EAAUW,SAEZN,EAA8B,IAAlBK,KAAKN,aC9BrBN,aDmCW,gSACF,eAAUc,MAAK,SAAAC,OACfb,EAAUW,QAAS,CACtBd,EAAgBc,QAAUE,EAAIC,KAC9Bd,EAAUW,SAAU,MAEdL,EAAQ,IAAIT,EAAgBc,WAChCrB,IAAKyB,MAAMC,QAAQ1B,GAAOA,EAAM,CAACA,GACjCC,OAAAA,EACA0B,KAAMzB,EACNG,OAAQa,GACLZ,IAGLW,EAASD,OAIN,WACLN,EAAUW,SAAU,KCtDE,ID6D1Bb,EAAMoB,WAAU,WACVrB,EAAgBc,SAAWL,GAC7BC,EACE,IAAIV,EAAgBc,WAClBrB,IAAKyB,MAAMC,QAAQ1B,GAAOA,EAAM,CAACA,GACjCC,OAAAA,EACAI,OAAQa,GACLZ,OAWR,CAACuB,KAAKC,UAAU9B,KAInBQ,EAAMoB,WAAU,WACVZ,IACFA,EAAMf,OAAOA,GACbe,EAAMW,KAAKzB,MAOZ,CAACD,EAAQC,QAEN6B,EAAqBvB,EAAMwB,aAC/B,SAACC,QACwB,IAAZA,IACTA,EAAU,IAGPjB,IAAWb,GAAiB8B,EAAQC,qBAIrC9B,GACFY,EAAMmB,OAGJF,EAAQ/B,cACVc,EAAMW,KAAKM,EAAQ/B,cAGrBc,EAAMe,KAAKE,EAAQG,IAEf1B,EAAUW,SACZL,EAAMqB,KAAK,OAAO,WAEXrB,EAAMsB,WACTzB,GAAa,MAKfH,EAAUW,SACZR,GAAa,MAGjB,CAACG,EAAOb,EAAcC,IAGlB+B,EAAO3B,EAAMwB,aACjB,SAAAI,GACOpB,IAGLA,EAAMmB,KAAKC,GAEP1B,EAAUW,SACZR,GAAa,MAGjB,CAACG,IAGGuB,EAAQ/B,EAAMwB,aAClB,SAAAI,GACOpB,IAGLA,EAAMuB,MAAMH,GAER1B,EAAUW,SACZR,GAAa,MAGjB,CAACG,UAGkC,CACnCe,EACA,CACEf,MAAAA,EACAmB,KAAAA,EACAI,MAAAA,EACA3B,UAAAA,EACAE,SAAAA"}